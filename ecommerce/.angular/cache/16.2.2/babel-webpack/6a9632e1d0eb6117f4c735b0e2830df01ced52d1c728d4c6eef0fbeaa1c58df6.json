{"ast":null,"code":"var _class;\nimport { BehaviorSubject, from } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.authStatus = new BehaviorSubject(this.isAuthenticated());\n  }\n  isAuthenticated() {\n    return localStorage.getItem('authStatus') === 'true';\n  }\n  getAuthStatus$() {\n    return this.authStatus.asObservable();\n  }\n  setAuthenticated(status) {\n    localStorage.setItem('authStatus', String(status));\n    this.authStatus.next(status);\n  }\n  getUsers() {\n    return this.http.get('http://localhost:4444/clients/');\n  }\n  getAuthenticatedUser() {\n    return this.http.get('http://localhost:4444/clients/');\n  }\n  addUser(user) {\n    // this.httpOptions=new HttpHeaders({\n    //     'Content-Type': 'application/json'}\n    //   );\n    // return this.http.post(\"http://localhost:4444/clients/add\", JSON.stringify(user), this.httpOptions);\n    return from(fetch(\"http://localhost:4444/auth/register\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: user\n    }));\n  }\n  authenticate(username, password) {\n    let fd = new FormData();\n    fd.append(\"username\", username);\n    fd.append(\"password\", password);\n    let plainObject = {};\n    fd.forEach((value, key) => plainObject[key] = value);\n    let jsonString = JSON.stringify(plainObject);\n    return from(fetch(\"http://localhost:4444/auth/authenticate\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: jsonString\n    }));\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","from","AuthService","constructor","http","authStatus","isAuthenticated","localStorage","getItem","getAuthStatus$","asObservable","setAuthenticated","status","setItem","String","next","getUsers","get","getAuthenticatedUser","addUser","user","fetch","method","headers","body","authenticate","username","password","fd","FormData","append","plainObject","forEach","value","key","jsonString","JSON","stringify","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Studies\\Projects\\Angular\\ecommerce\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {User, UsersResponse} from \"./models/user\";\nimport {ProductsResponse} from \"./models/product-item\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {BehaviorSubject, from, Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private authStatus = new BehaviorSubject<boolean>(this.isAuthenticated());\n\n  httpOptions:any;\n\n  constructor(private http:HttpClient) { }\n\n\n  public isAuthenticated(): boolean {\n    return localStorage.getItem('authStatus') === 'true';\n  }\n\n  getAuthStatus$() {\n    return this.authStatus.asObservable();\n  }\n\n  public setAuthenticated(status: boolean): void {\n    localStorage.setItem('authStatus', String(status));\n    this.authStatus.next(status);\n  }\n  getUsers() {\n    return this.http.get<UsersResponse>('http://localhost:4444/clients/');\n  }\n\n  getAuthenticatedUser(){\n    return this.http.get<UsersResponse>('http://localhost:4444/clients/');\n  }\n\n\n  addUser(user: any): any {\n    // this.httpOptions=new HttpHeaders({\n    //     'Content-Type': 'application/json'}\n    //   );\n    // return this.http.post(\"http://localhost:4444/clients/add\", JSON.stringify(user), this.httpOptions);\n\n    return from(fetch(\"http://localhost:4444/auth/register\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: user\n    }));\n  }\n\n  authenticate(username: string, password: string): any {\n    let fd = new FormData();\n    fd.append(\"username\", username);\n    fd.append(\"password\", password);\n\n    let plainObject:any = {};\n    fd.forEach((value: any, key: any) => plainObject[key] = value);\n\n    let jsonString :any = JSON.stringify(plainObject);\n\n    return from(fetch(\"http://localhost:4444/auth/authenticate\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: jsonString\n    }));\n  }\n}\n"],"mappings":";AAIA,SAAQA,eAAe,EAAEC,IAAI,QAAmB,MAAM;;;AAKtD,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,UAAU,GAAG,IAAIL,eAAe,CAAU,IAAI,CAACM,eAAe,EAAE,CAAC;EAIlC;EAGhCA,eAAeA,CAAA;IACpB,OAAOC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,KAAK,MAAM;EACtD;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACJ,UAAU,CAACK,YAAY,EAAE;EACvC;EAEOC,gBAAgBA,CAACC,MAAe;IACrCL,YAAY,CAACM,OAAO,CAAC,YAAY,EAAEC,MAAM,CAACF,MAAM,CAAC,CAAC;IAClD,IAAI,CAACP,UAAU,CAACU,IAAI,CAACH,MAAM,CAAC;EAC9B;EACAI,QAAQA,CAAA;IACN,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAgB,gCAAgC,CAAC;EACvE;EAEAC,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACd,IAAI,CAACa,GAAG,CAAgB,gCAAgC,CAAC;EACvE;EAGAE,OAAOA,CAACC,IAAS;IACf;IACA;IACA;IACA;IAEA,OAAOnB,IAAI,CAACoB,KAAK,CAAC,qCAAqC,EAAE;MACvDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;OACjB;MACDC,IAAI,EAAEJ;KACP,CAAC,CAAC;EACL;EAEAK,YAAYA,CAACC,QAAgB,EAAEC,QAAgB;IAC7C,IAAIC,EAAE,GAAG,IAAIC,QAAQ,EAAE;IACvBD,EAAE,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;IAC/BE,EAAE,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC;IAE/B,IAAII,WAAW,GAAO,EAAE;IACxBH,EAAE,CAACI,OAAO,CAAC,CAACC,KAAU,EAAEC,GAAQ,KAAKH,WAAW,CAACG,GAAG,CAAC,GAAGD,KAAK,CAAC;IAE9D,IAAIE,UAAU,GAAQC,IAAI,CAACC,SAAS,CAACN,WAAW,CAAC;IAEjD,OAAO9B,IAAI,CAACoB,KAAK,CAAC,yCAAyC,EAAE;MAC3DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;OACjB;MACDC,IAAI,EAAEW;KACP,CAAC,CAAC;EACL;;SA9DWjC,WAAW;;mBAAXA,MAAW,EAAAoC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXvC,MAAW;EAAAwC,OAAA,EAAXxC,MAAW,CAAAyC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}