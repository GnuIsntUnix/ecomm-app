{"ast":null,"code":"var _class;\nimport { from } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.users = [{\n      firstName: \"Terry\",\n      lastName: \"Medhurst\",\n      gender: \"male\",\n      email: \"atuny0@sohu.com\",\n      phone: \"+63 791 675 8914\",\n      password: \"9uQFF1Lh\",\n      birthDate: new Date()\n    }];\n  }\n  isAuthenticated() {\n    return this.authStatus;\n  }\n  setAuthenticated(status) {\n    this.authStatus = status;\n  }\n  getUsers() {\n    return this.http.get('http://localhost:4444/clients/');\n  }\n  getUserById(id) {\n    return this.http.get('http://localhost:4444/clients/' + id);\n  }\n  addUser(user) {\n    // this.httpOptions=new HttpHeaders({\n    //     'Content-Type': 'application/json'}\n    //   );\n    // return this.http.post(\"http://localhost:4444/clients/add\", JSON.stringify(user), this.httpOptions);\n    return from(fetch(\"http://localhost:4444/clients/add\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: user\n    }));\n  }\n  findUser(email, password) {\n    let fd = new FormData();\n    this.getUsers().subscribe(response => {\n      users = response.users;\n    });\n    return users.find(user => user.email === email && user.password === password);\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["from","AuthService","constructor","http","users","firstName","lastName","gender","email","phone","password","birthDate","Date","isAuthenticated","authStatus","setAuthenticated","status","getUsers","get","getUserById","id","addUser","user","fetch","method","headers","body","findUser","fd","FormData","subscribe","response","find","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Studies\\Projects\\Angular\\ecommerce\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {User, UsersResponse} from \"./models/user\";\nimport {ProductsResponse} from \"./models/product-item\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {from, Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  authStatus: boolean | undefined;\n\n  users: User[] = [{\n    firstName: \"Terry\",\n    lastName: \"Medhurst\",\n    gender: \"male\",\n    email: \"atuny0@sohu.com\",\n    phone: \"+63 791 675 8914\",\n    password: \"9uQFF1Lh\",\n    birthDate: new Date()\n  }];\n\n  httpOptions:any;\n\n  constructor(private http:HttpClient) { }\n\n\n  public isAuthenticated(): boolean {\n    return <boolean>this.authStatus;\n  }\n\n  public setAuthenticated(status: boolean): void {\n    this.authStatus = status;\n  }\n  getUsers() {\n    return this.http.get<UsersResponse>('http://localhost:4444/clients/');\n  }\n\n  getUserById(id: number) {\n    return this.http.get<UsersResponse>('http://localhost:4444/clients/'+id);\n  }\n\n  addUser(user: any): any {\n    // this.httpOptions=new HttpHeaders({\n    //     'Content-Type': 'application/json'}\n    //   );\n    // return this.http.post(\"http://localhost:4444/clients/add\", JSON.stringify(user), this.httpOptions);\n\n    return from(fetch(\"http://localhost:4444/clients/add\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: user\n    }));\n  }\n\n  findUser(email: string, password: string): User | undefined {\n    let fd = new FormData();\n\n    this.getUsers().subscribe( response => {\n      users = response.users;\n    });\n    return users.find(user => user.email === email && user.password === password);\n  }\n}\n"],"mappings":";AAIA,SAAQA,IAAI,QAAmB,MAAM;;;AAKrC,OAAM,MAAOC,WAAW;EAgBtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAZxB,KAAAC,KAAK,GAAW,CAAC;MACfC,SAAS,EAAE,OAAO;MAClBC,QAAQ,EAAE,UAAU;MACpBC,MAAM,EAAE,MAAM;MACdC,KAAK,EAAE,iBAAiB;MACxBC,KAAK,EAAE,kBAAkB;MACzBC,QAAQ,EAAE,UAAU;MACpBC,SAAS,EAAE,IAAIC,IAAI;KACpB,CAAC;EAIqC;EAGhCC,eAAeA,CAAA;IACpB,OAAgB,IAAI,CAACC,UAAU;EACjC;EAEOC,gBAAgBA,CAACC,MAAe;IACrC,IAAI,CAACF,UAAU,GAAGE,MAAM;EAC1B;EACAC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAgB,gCAAgC,CAAC;EACvE;EAEAC,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACjB,IAAI,CAACe,GAAG,CAAgB,gCAAgC,GAACE,EAAE,CAAC;EAC1E;EAEAC,OAAOA,CAACC,IAAS;IACf;IACA;IACA;IACA;IAEA,OAAOtB,IAAI,CAACuB,KAAK,CAAC,mCAAmC,EAAE;MACrDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;OACjB;MACDC,IAAI,EAAEJ;KACP,CAAC,CAAC;EACL;EAEAK,QAAQA,CAACnB,KAAa,EAAEE,QAAgB;IACtC,IAAIkB,EAAE,GAAG,IAAIC,QAAQ,EAAE;IAEvB,IAAI,CAACZ,QAAQ,EAAE,CAACa,SAAS,CAAEC,QAAQ,IAAG;MACpC3B,KAAK,GAAG2B,QAAQ,CAAC3B,KAAK;IACxB,CAAC,CAAC;IACF,OAAOA,KAAK,CAAC4B,IAAI,CAACV,IAAI,IAAIA,IAAI,CAACd,KAAK,KAAKA,KAAK,IAAIc,IAAI,CAACZ,QAAQ,KAAKA,QAAQ,CAAC;EAC/E;;SAxDWT,WAAW;;mBAAXA,MAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXnC,MAAW;EAAAoC,OAAA,EAAXpC,MAAW,CAAAqC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}