{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.users = [];\n  }\n  getUsers() {\n    return this.http.get('https://dummyjson.com/users').subscribe(response => {\n      this.users = response.users;\n    });\n  }\n  getUserById(id) {\n    return this.http.get('https://dummyjson.com/users/' + id);\n  }\n  addUser(user) {\n    this.users?.push(user);\n    return this.http.post(\"https://dummyjson.com/users/add\", user);\n  }\n  findUser(email, password) {\n    return this.users.find(user => user.email === email && user.password === password);\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthService","constructor","http","users","getUsers","get","subscribe","response","getUserById","id","addUser","user","push","post","findUser","email","password","find","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Studies\\Projects\\Angular\\ecommerce\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {User, UsersResponse} from \"./models/user\";\nimport {ProductsResponse} from \"./models/product-item\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  users: User[] = [];\n\n  constructor(private http:HttpClient) { }\n\n  getUsers() {\n    return this.http.get<UsersResponse>('https://dummyjson.com/users').subscribe(response => {\n      this.users = response.users;\n    });\n  }\n\n  getUserById(id: number) {\n    return this.http.get<ProductsResponse>('https://dummyjson.com/users/'+id);\n  }\n\n  addUser(user: User): Observable<User> {\n    this.users?.push(user);\n    return this.http.post<User>(\"https://dummyjson.com/users/add\", user);\n  }\n\n  findUser(email: string, password: string): User | undefined {\n    return this.users.find(user => user.email === email && user.password === password);\n  }\n}\n"],"mappings":";;;AASA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,KAAK,GAAW,EAAE;EAEqB;EAEvCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAgB,6BAA6B,CAAC,CAACC,SAAS,CAACC,QAAQ,IAAG;MACtF,IAAI,CAACJ,KAAK,GAAGI,QAAQ,CAACJ,KAAK;IAC7B,CAAC,CAAC;EACJ;EAEAK,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAmB,8BAA8B,GAACI,EAAE,CAAC;EAC3E;EAEAC,OAAOA,CAACC,IAAU;IAChB,IAAI,CAACR,KAAK,EAAES,IAAI,CAACD,IAAI,CAAC;IACtB,OAAO,IAAI,CAACT,IAAI,CAACW,IAAI,CAAO,iCAAiC,EAAEF,IAAI,CAAC;EACtE;EAEAG,QAAQA,CAACC,KAAa,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACb,KAAK,CAACc,IAAI,CAACN,IAAI,IAAIA,IAAI,CAACI,KAAK,KAAKA,KAAK,IAAIJ,IAAI,CAACK,QAAQ,KAAKA,QAAQ,CAAC;EACpF;;SAvBWhB,WAAW;;mBAAXA,MAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXrB,MAAW;EAAAsB,OAAA,EAAXtB,MAAW,CAAAuB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}